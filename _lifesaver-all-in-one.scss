//
// + Functions
// =============================================


@function is-null($list) {
  @return if(index($list, x) or index($list, null), true, null);
}

@function set-default($list, $default) {
  @return if(index($list, x) or index($list, null), $default, $list);
}


//
// + Safe Units
// =============================================

//
// + Scale Compensation
// =============================================

@function scale-comp($value, $scale: null) {
  @return if(is-null($scale), $value, (16 / $scale) * $value);
}

//
// + Convert
// =============================================

@function ceil-convert($value) {
  @return ceil($value) / 16;
}

@function floor-convert($value) {
  @return floor($value) / 16;
}

@function round-convert($value) {
  @return round($value) / 16;
}

@function convert($value) {
  @return $value / 16;
}

@function safe($value) {
  @return round($value * 16) / 16;
}

@function safe-convert($value) {
  @return round($value * 16) / (16 * 16);
}

//
// + Units
// =============================================

@function un($value, $scale: null) {
  @return safe-convert(scale-comp($value, $scale));
}

@function em($value, $scale: null) {
  $result: safe-convert(scale-comp($value, $scale));
  @return if($value == 0, $result, $result * 1em);
}

@function rem($value, $scale: null) {
  $result: safe-convert(scale-comp($value, $scale));
  @return if($value == 0, $result, $result * 1rem);
}

@function px($value, $scale: null) {
  $result: safe(scale-comp($value, $scale));
  @return if($value == 0, $result, $result * 1px);
}

@function pct($value, $scale: null) {
  $result: scale-comp($value, $scale);
  @return if($value == 0, $result, $result * 100%);
}

@function vw($value, $scale: null) {
  $result: scale-comp($value, $scale);
  @return if($value == 0, $result, $result * 1vw);
}

@function vh($value, $scale: null) {
  $result: scale-comp($value, $scale);
  @return if($value == 0, $result, $result * 1vh);
}

//
// + Floor
// =============================================

@function floor-un($value) {
  @return floor-convert($value);
}

@function floor-em($value) {
  $result: floor-convert($value);
  @return if($value == 0, $result, $result * 1em);
}

@function floor-rem($value) {
  $result: floor-convert($value);
  @return if($value == 0, $result, $result * 1rem);
}

@function floor-px($value) {
  $result: floor($value);
  @return if($value == 0, $result, $result * 1px);
}

//
// + Round
// =============================================

@function round-un($value) {
  @return round-convert($value);
}

@function round-em($value) {
  $result: round-convert($value);
  @return if($value == 0, $result, $result * 1em);
}

@function round-rem($value) {
  $result: round-convert($value);
  @return if($value == 0, $result, $result * 1rem);
}

@function round-px($value) {
  $result: round($value);
  @return if($value == 0, $result, $result * 1px);
}


// LifeSaver - 1.0.6
// March 27, 2015
// The MIT License (MIT)
// Copyright (c) 2015 Dustin Dowell
// github.com/dustindowell22/lifesaver
// =============================================


@mixin ls($property-list: null, $value-list: null, $unit-list: null, $scale: null, $flag: null) {
  $unit-functions: em rem px pct vw vh;
  $length: length($value-list);

  // Check if $flag contains x or null
  $flag: if(is-null($flag), null, $flag);

  // Compress matching values to shorthand
  @if $length == 4 {
    $top: nth($value-list, 1);
    $right: nth($value-list, 2);
    $bottom: nth($value-list, 3);
    $left: nth($value-list, 4);

    @if $top == $bottom and $left == $right {
      $value-list: $top, $right;
      $length: 2;
    }
    @else if $top == $right and $top == $bottom and $top == $left {
      $value-list: $top;
      $length: 1;
    }
  }
  @else if $length == 2 {
    $top-bottom: nth($value-list, 1);
    $left-right: nth($value-list, 2);

    @if $top-bottom == $left-right {
      $value-list: $top-bottom;
      $length: 1;
    }
  }

  // Loop though properties
  @each $property in $property-list {

    // Split output into multiple properties
    @if is-null($value-list) or $property == position  {

      // Set map scope
      $suffix-map: ();

      // Assign $value-list values to $suffix-map
      @if $length == 2 or $length == 4 {
        @if $property == border-radius {
          $suffix-map: (
            top-left: nth($value-list, 1),
            top-right: nth($value-list, 2),
            bottom-right: if($length == 2, nth($value-list, 1), nth($value-list, 3)),
            bottom-left: if($length == 2, nth($value-list, 2), nth($value-list, 4))
         );
        }
        @else {
          $suffix-map: (
            top: nth($value-list, 1),
            right: nth($value-list, 2),
            bottom: if($length == 2, nth($value-list, 1), nth($value-list, 3)),
            left: if($length == 2, nth($value-list, 2), nth($value-list, 4))
         );
        }
      }

      // Prepare property suffixes and output
      @each $unit in $unit-list {
        @each $suffix-key in map-keys($suffix-map) {
          $value: map-get($suffix-map, $suffix-key);

          // Append suffix when needed
          @if $property == border-width {
            $suffix-key: 'border-' + $suffix-key + '-width';
          }
          @else if $property == border-radius {
            $suffix-key: 'border-' + $suffix-key + '-radius';
          }
          @else if $property == margin or $property == padding {
            $suffix-key: $property + '-' + $suffix-key;
          }

          // Output
          @if not is-null($value) {
            @if $value == 0 or type-of($value) == string {
              #{$suffix-key}: append($value, $flag);
            }
            @else if function-exists($unit) {
              #{$suffix-key}: append(call($unit, $value, $scale), $flag);
            }
            @else {
              @error 'Mayday! Mayday!  LifeSaver: You used an invalid unit type.';
            }
          }
        }
      }
    }

    // Concatenate shorthand values and output
    @else if $length == 1 or $length == 2 or $length == 4 {
      @each $unit in $unit-list {

        // Set list scope
        $result: null;

        // Concatenate shorthand output
        @each $value in $value-list {
          @if $value == 0 or type-of($value) == string {
            $result: append($result, $value);
          }
          @else if function-exists($unit) {
            $result: append($result, call($unit, $value, $scale));
          }
          @else {
            @error 'Mayday! Mayday!  LifeSaver: You used an invalid unit type.';
          }
        }

        // Output
        #{$property}: append($result, $flag);
      }
    }
  }
}


//
// + Size
// =============================================


@mixin size($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  $length: length($value-list);

  @if $length == 2 {
    $width:  nth($value-list, 1);
    $height: nth($value-list, 2);

    @include ls(width, $width, $unit-list, $scale, $flag);
    @include ls(height, $height, $unit-list, $scale, $flag);
  }
  @else if $length == 1 {
    $width:  nth($value-list, 1);
    $height: nth($value-list, 1);

    @include ls(width, $width, $unit-list, $scale, $flag);
    @include ls(height, $height, $unit-list, $scale, $flag);
  }
  @else {
    @error 'Mayday! LifeSaver: You can only pass up to 2 values to size.';
  }
}


//
// + Min Size
// =============================================


@mixin min-size($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  $length: length($value-list);

  @if $length == 2 {
    $width:  nth($value-list, 1);
    $height: nth($value-list, 2);

    @include ls(min-width, $width, $unit-list, $scale, $flag);
    @include ls(min-height, $height, $unit-list, $scale, $flag);
  }
  @else if $length == 1 {
    $width:  nth($value-list, 1);
    $height: nth($value-list, 1);

    @include ls(min-width, $width, $unit-list, $scale, $flag);
    @include ls(min-height, $height, $unit-list, $scale, $flag);
  }
  @else {
    @error 'Mayday! LifeSaver: You can only pass up to 2 values to min-size.';
  }
}


//
// + Max Size
// =============================================


@mixin max-size($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  $length: length($value-list);

  @if $length == 2 {
    $width:  nth($value-list, 1);
    $height: nth($value-list, 2);

    @include ls(max-width, $width, $unit-list, $scale, $flag);
    @include ls(max-height, $height, $unit-list, $scale, $flag);
  }
  @else if $length == 1 {
    $width:  nth($value-list, 1);
    $height: nth($value-list, 1);

    @include ls(max-width, $width, $unit-list, $scale, $flag);
    @include ls(max-height, $height, $unit-list, $scale, $flag);
  }
  @else {
    @error 'Mayday! LifeSaver: You can only pass up to 2 values to max-size.';
  }
}


//
// + Margin
// =============================================


@mixin margin($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  @include ls(margin, $value-list, $unit-list, $scale, $flag);
}


//
// + Padding
// =============================================


@mixin padding($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  @include ls(padding, $value-list, $unit-list, $scale, $flag);
}


//
// + Border
// =============================================


@mixin border-width($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  @include ls(border-width, $value-list, $unit-list, $scale, $flag);
}

@mixin border-radius($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  @include ls(border-radius, $value-list, $unit-list, $scale, $flag);
}


//
// + Border Shorthand
// =============================================


@mixin radius($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  @include border-radius($value-list, $unit-list, $scale, $flag);
}


//
// + Position
// =============================================


@mixin position($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin position-absolute($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: absolute;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin position-fixed($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: fixed;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin position-inherit($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: inherit;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin position-relative($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: relative;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin position-static($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: static;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin position-sticky($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: sticky;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}


//
// + Position Shorthand
// =============================================


@mixin absolute($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  @include position-absolute($value-list, $unit-list, $scale, $z, $flag);
}

@mixin fixed($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  @include position-fixed($value-list, $unit-list, $scale, $z, $flag);
}

@mixin relative($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  @include position-relative($value-list, $unit-list, $scale, $z, $flag);
}

@mixin static($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  @include position-static($value-list, $unit-list, $scale, $z, $flag);
}

@mixin sticky($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  @include position-sticky($value-list, $unit-list, $scale, $z, $flag);
}
