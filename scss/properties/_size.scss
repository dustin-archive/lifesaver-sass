//
// + Size
// =============================================


@mixin size-type($size-type, $value-list, $unit-list: null, $scale: null, $flag: null) {
  $length: length($value-list);

  // Set scope
  $width: null;
  $height: null;

  @if $length == 1 {
    $width:  nth($value-list, 1);
    $height: nth($value-list, 1);
  }
  @else if $length == 2 {
    $width:  nth($value-list, 1);
    $height: nth($value-list, 2);
  }
  @else {
    @warn 'LifeSaver: You can only pass up to 2 values to min-size or max-size.';
  }

  @if $size-type == size {
    @include ls(width, $width, $unit-list, $scale, $flag);
    @include ls(height, $height, $unit-list, $scale, $flag);
  }
  @else if $size-type == min {
    @include ls(min-width, $width, $unit-list, $scale, $flag);
    @include ls(min-height, $height, $unit-list, $scale, $flag);
  }
  @else if $size-type == max {
    @include ls(max-width, $width, $unit-list, $scale, $flag);
    @include ls(max-height, $height, $unit-list, $scale, $flag);
  }
  @else {
    @warn 'LifeSaver: You passed an invalid $size-type argument to min-size or max-size.';
  }
}

@mixin size($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  @include size-type(size, $value-list, $unit-list, $scale, $flag);
}

@mixin min-size($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  @include size-type(min, $value-list, $unit-list, $scale, $flag);
}

@mixin max-size($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  @include size-type(max, $value-list, $unit-list, $scale, $flag);
}
