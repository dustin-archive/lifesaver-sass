//
// + Properties
// =============================================================================
// these all need to get merged together some how

@mixin properties($arguments, $properties) {
  $arguments: process-arguments($arguments);
  $arguments: map-merge($arguments, (properties: $properties));
  @include lifesaver($arguments);
}

@mixin properties-size($arguments, $properties) {
  $arguments: process-arguments($arguments);
  $values: map-get($arguments, values);

  @if length($values) == 1 {
    $values: nth($values, 1) nth($values, 1);
  }

  @if nth($values, 1) != null {
    $arguments: map-merge($arguments, (properties: nth($properties, 1)));
    $arguments: map-merge($arguments, (values: nth($values, 1)));
    @include lifesaver($arguments);
  }
  @if nth($values, 2) != null {
    $arguments: map-merge($arguments, (properties: nth($properties, 2)));
    $arguments: map-merge($arguments, (values: nth($values, 2)));
    @include lifesaver($arguments);
  }
}

@mixin properties-values($arguments, $properties, $value-type) {
  $arguments: process-arguments($arguments);
  $value: map-get($arguments, values);
  $arguments: map-merge($arguments, (properties: $properties));

  // error if length($value) > 1

  // Convert value from a list to value
  $value: nth($value, 1);

  @if $value-type == top {
    $arguments: map-merge($arguments, (values: $value null null null));
  }
  @else if $value-type == right {
    $arguments: map-merge($arguments, (values: null $value null null));
  }
  @else if $value-type == bottom {
    $arguments: map-merge($arguments, (values: null null $value null));
  }
  @else if $value-type == left {
    $arguments: map-merge($arguments, (values: null null null $value));
  }

  @include lifesaver($arguments);
}
