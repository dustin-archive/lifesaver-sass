// LifeSaver
// November 12, 2014
// The MIT License (MIT)
// Copyright (c) 2014 Dustin Dowell
// http://github.com/dustindowell22/lifesaver


@mixin ls( $property-list, $value-list, $unit-list: null, $scale-compensation: null, $important: null ) {

	// Return length of $value-list
	$length: length( $value-list );

	// Return true if x or null is in the list
	// These only need to be checked once so they're stored here
	$skip-unit:               skip( $unit-list,          true );
	$skip-scale-compensation: skip( $scale-compensation, true );

	@each $property in $property-list {
		@if skip( $value-list, true ) or $property == position {

			// Check length of 4 first because it's most common
			@if $length == 4 {
				@each $unit in $unit-list {

					// Use @for instead of @each so there's a counter $i for $suffix
					@for $i from 1 through $length {
						$value: nth( $value-list, $i );

						$suffix-list: top, right, bottom, left;

						$suffix: nth( $suffix-list, $i );

						$property-suffix: if( $property == position, $suffix, $property + '-' + $suffix );

						// When $value equals x or null don't output anything
						@if skip( $value, null ) {

							// Calculate scaling compensation when needed
							@if not $skip-scale-compensation {
								$value: scale-compensation( $value, $scale-compensation );
							}

							// Output
							@if $unit == em or $unit == rem {
								#{$property-suffix}: if( $important == important, append( append-unit( convert( $value ), $unit ), !important ), append-unit( convert( $value ), $unit ) );
							}
							@else if $skip-unit or $value == 0 or type-of( $value ) == string {
								#{$property-suffix}: if( $important == important, append( $value, !important ), $value );
							}
							@else {
								#{$property-suffix}: if( $important == important, append( append-unit( $value, $unit ), !important ), append-unit( $value, $unit ) );
							}
						}
					}
				}
			}

			// Only run if the previous @if was false
			@else if $length == 2 {
				@each $unit in $unit-list {

					// Use @for instead of @each so there's a counter $i for $suffix
					@for $i from 1 through $length {
						$value: nth( $value-list, $i );

						$suffix-list-1: top, left;
						$suffix-list-2: bottom, right;

						$suffix-1: nth( $suffix-list-1, $i );
						$suffix-2: nth( $suffix-list-2, $i );

						$property-suffix-1: if( $property == position, $suffix-1, $property + '-' + $suffix-1 );
						$property-suffix-2: if( $property == position, $suffix-2, $property + '-' + $suffix-2 );

						// When $value equals x don't output anything
						@if skip( $value, null ) {

							// Calculate scaling compensation when needed
							@if not $skip-scale-compensation {
								$value: scale-compensation( $value, $scale-compensation );
							}

							// Output
							@if $unit == em or $unit == rem {
								$property-value: if( $important == important, append( append-unit( convert( $value ), $unit ), !important ), append-unit( convert( $value ), $unit ) );
								#{$property-suffix-1}: $property-value;
								#{$property-suffix-2}: $property-value;
							}
							@else if $skip-unit or  $value == 0 or type-of( $value ) == string {
								$property-value: if( $important == important, append( $value, !important ), $value );
								#{$property-suffix-1}: $property-value;
								#{$property-suffix-2}: $property-value;
							}
							@else {
								$property-value: if( $important == important, append( append-unit( $value, $unit ), !important ), append-unit( $value, $unit ) );
								#{$property-suffix-1}: $property-value;
								#{$property-suffix-2}: $property-value;
							}
						}
					}
				}
			}
		}

		// Only run if the previous @if was false
		@else if skip( $value, null ) and $property != position {
			@if $length == 1 or $length == 2 or $length == 4 {
				@each $unit in $unit-list {

					// Placeholder for property result
					$result: null;

					@each $value in $value-list {

						// Calculate scaling compensation when needed
						@if not $skip-scale-compensation {
							$value: scale-compensation( $value, $scale-compensation );
						}

						// Output
						@if $unit == em or $unit == rem {
							$result: append( $result, append-unit( convert( $value ), $unit ) );
						}
						@else if $skip-unit or $value == 0 or type-of( $value ) == string {
							$result: append( $result, $value );
						}
						@else {
							$result: append( $result, append-unit( $value, $unit ) );
						}
					}

					#{$property}: if( $important == important , append( $result, !important ), $result );
				}
			}
		}
	}
}
