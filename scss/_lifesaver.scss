// LifeSaver
// September 21, 2014
// The MIT License (MIT)
// Copyright (c) 2014 Dustin Dowell
// http://github.com/dustindowell22/lifesaver


// User functions
@function em( $value ) {
	@return convert( $value ) + em;
}

@function rem( $value ) {
	@return convert( $value ) + rem;
}

@function px( $value ) {
	@return round( $value ) + px;
}

@function pct( $value ) {
	@return percentage( $value );
}


// LifeSaver functions
@function add-unit( $value, $unit ) {
	@return if( $unit == pct, percentage( $value ), $value + $unit );
}

@function convert( $value ) {
	@return $value / 16;
}

@function safe-convert( $value ) {
	@return round( $value * 16 ) / 16;
}


// LifeSaver
@mixin ls( $property-list: null, $value-list: null, $unit-list: null, $important: null ) {

	$length: length( $value-list );

	$skip: index( $value-list, x ); // Returns null if $value-list does not contain x

	@each $property in $property-list {
		@if $skip or $property == position {

			@if $length == 2 {
				@each $unit in $unit-list {
					@for $i from 1 through $length {

						$value: nth( $value-list, $i );

						$suffix-list-1: top, left;
						$suffix-list-2: bottom, right;

						$suffix-1: nth( $suffix-list-1, $i );
						$suffix-2: nth( $suffix-list-2, $i );

						$property-suffix-1: if( $property == position, $suffix-1, $property + "-" + $suffix-1 );
						$property-suffix-2: if( $property == position, $suffix-2, $property + "-" + $suffix-2 );

						@if $value != x {
							@if $value == 0 or type-of( $value ) == string {
								#{$property-suffix-1}: if( $important == important, append( $value, !important ), $value );
								#{$property-suffix-2}: if( $important == important, append( $value, !important ), $value );
							}
							@else {
								@if $unit == rem or $unit == em {
									#{$property-suffix-1}: if( $important == important, append( add-unit( convert( $value ), $unit ), !important ), add-unit( convert( $value ), $unit ) );
									#{$property-suffix-2}: if( $important == important, append( add-unit( convert( $value ), $unit ), !important ), add-unit( convert( $value ), $unit ) );
								}
								@else {
									#{$property-suffix-1}: if( $important == important, append( add-unit( $value, $unit ), !important ), add-unit( $value, $unit ) );
									#{$property-suffix-2}: if( $important == important, append( add-unit( $value, $unit ), !important ), add-unit( $value, $unit ) );
								}
							}
						}
					}
				}
			}

			@if $length == 4 {
				@each $unit in $unit-list {
					@for $i from 1 through $length {

						$value: nth( $value-list, $i );

						$suffix-list: top, right, bottom, left;

						$suffix: nth( $suffix-list, $i );

						$property-suffix: if( $property == position, $suffix, $property + '-' + $suffix );

						@if $value != x {
							@if $value == 0 or type-of( $value ) == string {
								#{$property-suffix}: if( $important == important, append( $value, !important ), $value );
							}
							@else {
								@if $unit == rem or $unit == em {
									#{$property-suffix}: if( $important == important, append( add-unit( convert( $value ), $unit ), !important ), add-unit( convert( $value ), $unit ) );
								}
								@else {
									#{$property-suffix}: if( $important == important, append( add-unit( $value, $unit ), !important ), add-unit( $value, $unit ) );
								}
							}
						}
					}
				}
			}
		}

		@if not $skip and $property != position {
			@if $length == 1 or $length == 2 or $length == 4 {
				@each $unit in $unit-list {

					$result: null;

					@each $value in $value-list {
						@if $value != x {
							@if $value == 0 or type-of( $value ) == string {
								$result: append( $result, $value );
							}
							@else {
								@if $unit == rem or $unit == em {
									$result: append( $result, add-unit( convert( $value ), $unit ) );
								}
								@else {
									$result: append( $result, add-unit( $value, $unit ) );
								}
							}
						}
					}

					#{$property}: if( $important == important , append( $result, !important ), $result );
				}
			}
		}
	}
}
