// LifeSaver
// January 15, 2015
// The MIT License (MIT)
// Copyright (c) 2015 Dustin Dowell
// http://github.com/dustindowell22/lifesaver


@mixin ls($property-list: null, $value-list: null, $unit-list: null, $scale: null, $flag: null) {
  $length: length($value-list);
  $flag: if(skippable($flag), null, $flag);

  //
  // + Compresses matching values to shorthand
  // ===========================================

  @if $length == 4 {
    $top: nth($value-list, 1);
    $right: nth($value-list, 2);
    $bottom: nth($value-list, 3);
    $left: nth($value-list, 4);

    @if $top == $bottom and $left == $right {
      $value-list: $top, $right;
      $length: 2;
    }
    @else if $top == $right and $top == $bottom and $top == $left {
      $value-list: $top;
      $length: 1;
    }
  }
  @else if $length == 2 {
    $top-bottom: nth($value-list, 1);
    $left-right: nth($value-list, 2);

    @if $top-bottom == $left-right {
      $value-list: $top-bottom;
      $length: 1;
    }
  }

  @each $property in $property-list {

    //
    // + Splits output into multiple properties
    // ==========================================

    @if skippable($value-list) or $property == position  {

      // Set scope
      $suffix-map: ();

      @if $length == 2 or $length == 4 {
        @if $property == border-radius {
          $suffix-map: (
            top-left: nth($value-list, 1),
            top-right: nth($value-list, 2),
            bottom-right: if($length == 2, nth($value-list, 1), nth($value-list, 3)),
            bottom-left: if($length == 2, nth($value-list, 2), nth($value-list, 4))
         );
        }
        @else {
          $suffix-map: (
            top: nth($value-list, 1),
            right: nth($value-list, 2),
            bottom: if($length == 2, nth($value-list, 1), nth($value-list, 3)),
            left: if($length == 2, nth($value-list, 2), nth($value-list, 4))
         );
        }
      }

      //
      // + Prepares output and outputs
      // ===============================

      @each $unit in $unit-list {
        @each $suffix-key in map-keys($suffix-map) {
          $value: map-get($suffix-map, $suffix-key);

          // Append suffix when needed
          @if $property == border-width {
            $suffix-key: 'border-' + $suffix-key + '-width';
          }
          @else if $property == border-radius {
            $suffix-key: 'border-' + $suffix-key + '-radius';
          }
          @else if $property == margin or $property == padding {
            $suffix-key: $property + '-' + $suffix-key;
          }

          // Ignore x and null
          @if not skippable($value) {

            // Output
            @if $unit == em {
              #{$suffix-key}: append(em($value, $scale), $flag);
            }
            @else if $unit == rem {
              #{$suffix-key}: append(rem($value, $scale), $flag);
            }
            @else if $unit == px {
              #{$suffix-key}: append(px($value, $scale), $flag);
            }
            @else if $unit == pct {
              #{$suffix-key}: append(pct($value, $scale), $flag);
            }
            @else if $unit == vw {
              #{$suffix-key}: append(vw($value, $scale), $flag);
            }
            @else if $unit == vh {
              #{$suffix-key}: append(vh($value, $scale), $flag);
            }
            @else if skip($unit, null) or $value == 0 or type-of($value) == string {
              #{$suffix-key}: append($value, $flag);
            }
            @else {
              @error 'Mayday! Mayday!  LifeSaver: You used an invalid unit type.';
            }
          }
        }
      }
    }

    //
    // + Concatenates shorthand values
    // =================================

    // Ensures only valid list lengths are processed
    @else if $length == 1 or $length == 2 or $length == 4 {
      @each $unit in $unit-list {

        // Set scope
        $result: null;

        @each $value in $value-list {

          // Output
          @if $unit == em {
            $result: append($result, em($value, $scale));
          }
          @else if $unit == rem {
            $result: append($result, rem($value, $scale));
          }
          @else if $unit == px {
            $result: append($result, px($value, $scale));
          }
          @else if $unit == pct {
            $result: append($result, pct($value, $scale));
          }
          @else if $unit == vw {
            $result: append($result, vw($value, $scale));
          }
          @else if $unit == vh {
            $result: append($result, vh($value, $scale));
          }
          @else if skip($unit, null) or $value == 0 or type-of($value) == string {
            $result: append($result, $value);
          }
          @else {
            @error 'Mayday! Mayday!  LifeSaver: You used an invalid unit type.';
          }
        }

        #{$property}: append($result, $flag);
      }
    }
  }
}
