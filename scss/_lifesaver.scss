// LifeSaver
// October 26, 2014
// The MIT License (MIT)
// Copyright (c) 2014 Dustin Dowell
// http://github.com/dustindowell22/lifesaver


// Functions
@function append-unit( $value, $unit ) {
	@return if( $unit == pct, percentage( $value ), $value + $unit );
}


// LifeSaver
@mixin ls( $property-list: null, $value-list: null, $unit-list: null, $important: null ) {

	// This returns the length of "$value-list".
	$length: length( $value-list );

	// This returns true or false depending if an "x" value is or isn't present in "$value-list".
	$skip: index( $value-list, x );

	@each $property in $property-list {
		@if $skip or $property == position {

			// This will only process "$value-list" if the length is 4.
			// Using all 4 values is most common, so it's checked first.
			// If "$length" equals 4 the compilation stops here.
			@if $length == 4 {
				@each $unit in $unit-list {

					// Creating a loop with "@for" this way gives us an loop counter "$i" to be used in $suffix.
					@for $i from 1 through $length {
						$value: nth( $value-list, $i );

						$suffix-list: top, right, bottom, left;

						$suffix: nth( $suffix-list, $i );

						$property-suffix: if( $property == position, $suffix, $property + '-' + $suffix );

						// When "$value" equals "x" ignore it and don't output anything.
						@if $value != x {
							@if $unit == em or $unit == rem {
								#{$property-suffix}: if( $important == important, append( append-unit( convert( $value ), $unit ), !important ), append-unit( convert( $value ), $unit ) );
							}
							@else if $value == 0 or type-of( $value ) == string {
								#{$property-suffix}: if( $important == important, append( $value, !important ), $value );
							}
							@else {
								#{$property-suffix}: if( $important == important, append( append-unit( $value, $unit ), !important ), append-unit( $value, $unit ) );
							}
						}
					}
				}
			}

			// This will only run if the check for the previous @if statment returns false.
			@else if $length == 2 {
				@each $unit in $unit-list {

					// Creating a loop with "@for" this way gives us an loop counter "$i" to be used in "$suffix".
					@for $i from 1 through $length {
						$value: nth( $value-list, $i );

						$suffix-list-1: top, left;
						$suffix-list-2: bottom, right;

						$suffix-1: nth( $suffix-list-1, $i );
						$suffix-2: nth( $suffix-list-2, $i );

						$property-suffix-1: if( $property == position, $suffix-1, $property + '-' + $suffix-1 );
						$property-suffix-2: if( $property == position, $suffix-2, $property + '-' + $suffix-2 );

						// When "$value" equals "x" ignore it and don't output anything.
						@if $value != x {
							@if $unit == em or $unit == rem {
								$property-value: if( $important == important, append( append-unit( convert( $value ), $unit ), !important ), append-unit( convert( $value ), $unit ) );
								#{$property-suffix-1}: $property-value;
								#{$property-suffix-2}: $property-value;
							}
							@else if $value == 0 or type-of( $value ) == string {
								$property-value: if( $important == important, append( $value, !important ), $value );
								#{$property-suffix-1}: $property-value;
								#{$property-suffix-2}: $property-value;
							}
							@else {
								$property-value: if( $important == important, append( append-unit( $value, $unit ), !important ), append-unit( $value, $unit ) );
								#{$property-suffix-1}: $property-value;
								#{$property-suffix-2}: $property-value;
							}
						}
					}
				}
			}
		}

		// This will only run if the check for the previous "@if" statment returns false.
		@else if not $skip and $property != position {
			@if $length == 1 or $length == 2 or $length == 4 {
				@each $unit in $unit-list {
					$result: null;

					@each $value in $value-list {
						@if $unit == em or $unit == rem {
							$result: append( $result, append-unit( convert( $value ), $unit ) );
						}
						@else if $value == 0 or type-of( $value ) == string {
							$result: append( $result, $value );
						}
						@else {
							$result: append( $result, append-unit( $value, $unit ) );
						}
					}

					#{$property}: if( $important == important , append( $result, !important ), $result );
				}
			}
		}
	}
}
