// LifeSaver
// October 24, 2014
// The MIT License (MIT)
// Copyright (c) 2014 Dustin Dowell
// http://github.com/dustindowell22/lifesaver


// User functions
@function em( $value ) {
	@return ceil-convert( $value ) * 1em; // Using ceil-convert reduces browser unit rounding issues.
}

@function rem( $value ) {
	@return ceil-convert( $value ) * 1rem; // Using ceil-convert reduces browser unit rounding issues.
}

@function px( $value ) {
	@return round( $value ) * 1px;
}

@function un( $value ) { // For unitless values.
	@return convert( $value );
}

@function pct( $value ) {
	@return percentage( $value );
}


// Floor Functions
@function floor-em( $value ) {
	@return floor-convert( $value ) * 1em;
}

@function floor-rem( $value ) {
	@return floor-convert( $value ) * 1rem;
}


// Round Functions
@function round-em( $value ) {
	@return round-convert( $value ) * 1em;
}

@function round-rem( $value ) {
	@return round-convert( $value ) * 1rem;
}


// LifeSaver functions
@function append-unit( $value, $unit ) {
	@return if( $unit == pct, percentage( $value ), $value + $unit );
}

@function convert( $value ) {
	@return $value / 16;
}

@function round-convert( $value ) {
	@return round( $value ) / 16;
}

@function floor-convert( $value ) {
	@return floor( $value ) / 16;
}

@function ceil-convert( $value ) {
	@return ceil( $value ) / 16;
}


// LifeSaver
@mixin ls( $property-list: null, $value-list: null, $unit-list: null, $important: null ) {

	// This returns the length of $value-list.
	$length: length( $value-list );

	// This returns true or false depending if an "x" value is or isn't present in $value-list.
	$skip: index( $value-list, x );

	// Loops through each $property in $property-list
	@each $property in $property-list {
		@if $skip or $property == position {

			// This will only process $value-list if the length is 4.
			// Using all 4 values is most common, so it's checked first.
			// If $length equals 4 the compilation stops here.
			@if $length == 4 {

				// Loops through each $value in $value-list.
				// Creating a loop with @for this way gives us an loop counter $i to be used in $suffix.
				@for $i from 1 through $length {
					$value: nth( $value-list, $i );

					$suffix-list: top, right, bottom, left;

					$suffix: nth( $suffix-list, $i );

					$property-suffix: if( $property == position, $suffix, $property + '-' + $suffix );

					// If or when $value equals "x" ignore it and don't output anything.
					@if $value != x {
						@each $unit in $unit-list {
							@if $value == 0 or type-of( $value ) == string {
								#{$property-suffix}: if( $important == important, append( $value, !important ), $value );
							}
							@else {
								@if $unit == em, rem {
									#{$property-suffix}: if( $important == important, append( append-unit( convert( $value ), $unit ), !important ), append-unit( convert( $value ), $unit ) );
								}
								@else {
									#{$property-suffix}: if( $important == important, append( append-unit( $value, $unit ), !important ), append-unit( $value, $unit ) );
								}
							}
						}
					}
				}
			}

			// This will only process $value-list if the length is 2 and not 4.
			// This is an @else if statement and will only run if the check for the previous @if statment returns false.
			@else if $length == 2 {

				// Loops through each $value in $value-list.
				// Creating a loop with @for this way gives us an loop counter $i to be used in $suffix.
				@for $i from 1 through $length {
					$value: nth( $value-list, $i );

					$suffix-list-1: top, left;
					$suffix-list-2: bottom, right;

					$suffix-1: nth( $suffix-list-1, $i );
					$suffix-2: nth( $suffix-list-2, $i );

					$property-suffix-1: if( $property == position, $suffix-1, $property + '-' + $suffix-1 );
					$property-suffix-2: if( $property == position, $suffix-2, $property + '-' + $suffix-2 );

					// If or when $value equals "x" ignore it and don't output anything.
					@if $value != x {
						@each $unit in $unit-list {
							@if $value == 0 or type-of( $value ) == string {
								#{$property-suffix-1}: if( $important == important, append( $value, !important ), $value );
								#{$property-suffix-2}: if( $important == important, append( $value, !important ), $value );
							}
							@else {
								@if $unit == em, rem {
									#{$property-suffix-1}: if( $important == important, append( append-unit( convert( $value ), $unit ), !important ), append-unit( convert( $value ), $unit ) );
									#{$property-suffix-2}: if( $important == important, append( append-unit( convert( $value ), $unit ), !important ), append-unit( convert( $value ), $unit ) );
								}
								@else {
									#{$property-suffix-1}: if( $important == important, append( append-unit( $value, $unit ), !important ), append-unit( $value, $unit ) );
									#{$property-suffix-2}: if( $important == important, append( append-unit( $value, $unit ), !important ), append-unit( $value, $unit ) );
								}
							}
						}
					}
				}
			}
		}

		// This is an @else if statement and will only run if the check for the previous @if statment returns false.
		@else if not $skip and $property != position {
			@if $length == 1, 2, 4 {
				$result: null;

				@each $value in $value-list {
					@each $unit in $unit-list {
						@if $value == 0 or type-of( $value ) == string {
							$result: append( $result, $value );
						}
						@else {
							@if $unit == em, rem {
								$result: append( $result, append-unit( convert( $value ), $unit ) );
							}
							@else {
								$result: append( $result, append-unit( $value, $unit ) );
							}
						}
					}

					#{$property}: if( $important == important , append( $result, !important ), $result );
				}
			}
		}
	}
}
