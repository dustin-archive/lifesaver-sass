//
// + LifeSaver
// =============================================================================


@mixin ls($properties, $values, $units: null, $scale: null, $flag: null) {
  $flag: if(is-null($flag), null, $flag);

  $values: compress-matching-values($values);

  // Split output into multiple properties
  @each $property in $properties {
    @if is-null($values) or $property == position  {
      $map: ();

      // Assign $values values to $map
      @if length($values) == 2 or length($values) == 4 {
        @if $property == border-radius {
          $map: (
            top-left: nth($values, 1),
            top-right: nth($values, 2),
            bottom-right: if(length($values) == 2, nth($values, 1), nth($values, 3)),
            bottom-left: if(length($values) == 2, nth($values, 2), nth($values, 4))
         );
        }
        @else {
          $map: (
            top: nth($values, 1),
            right: nth($values, 2),
            bottom: if(length($values) == 2, nth($values, 1), nth($values, 3)),
            left: if(length($values) == 2, nth($values, 2), nth($values, 4))
         );
        }
      }

      // Prepare property suffixes and output
      @each $unit in $units {
        @each $key in map-keys($map) {
          $value: map-get($map, $key);

          // Append suffix when needed
          @if $property == margin {
            $key: 'margin-' + $key;
          }
          @else if $property == padding {
            $key: 'padding-' + $key;
          }
          @else if $property == border-width {
            $key: 'border-' + $key + '-width';
          }
          @else if $property == border-style {
            $key: 'border-' + $key + '-style';
          }
          @else if $property == border-radius {
            $key: 'border-' + $key + '-radius';
          }
          @else if $property == border-color {
            $key: 'border-' + $key + '-color';
          }

          // Output
          @if not is-null($value) {
            @if $value == 0 or type-of($value) == string {
              #{$key}: append($value, $flag);
            }
            @else if function-exists($unit) {
              #{$key}: append(call($unit, $value, $scale), $flag);
            }
            @else {
              @warn 'LifeSaver: You used an invalid unit type.';
            }
          }
        }
      }
    }

    // Concatenate shorthand values and output
    @else if length($values) == 1 or length($values) == 2 or length($values) == 4 {
      @each $unit in $units {
        $result: null;

        // Concatenate shorthand output
        @each $value in $values {
          @if $value == 0 or type-of($value) == string {
            $result: append($result, $value);
          }
          @else if function-exists($unit) {
            $result: append($result, call($unit, $value, $scale));
          }
          @else {
            @warn 'LifeSaver: You used an invalid unit type.';
          }
        }

        // Output
        #{$property}: append($result, $flag);
      }
    }
  }
}
