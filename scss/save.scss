
// =============================================================================

@function save-x($value) {
  @if $value == x {
    @return null;
  }

  @return $value;
}

// =============================================================================

@function save-suffix($property) {
  $suffix: top right bottom left;

  @if $property == border-radius {
    $suffix: top-left top-right bottom-right bottom-left;
  }

  @return $suffix;
}

// =============================================================================

@function save-append-suffix($property, $suffix) {
  @if $property == null {
    $property: $suffix;
  }
  @else if $property == border-width {
    $property: border- + $suffix + -width;
  }
  @else if $property == border-style {
    $property: border- + $suffix + -style;
  }
  @else if $property == border-radius {
    $property: border- + $suffix + -radius;
  }
  @else if $property == border-color {
    $property: border- + $suffix + -color;
  }
  @else {
    $property: $property + '-' + $suffix;
  }
  @return $property;
}

// =============================================================================

@function save-compress-values($values) {
  $length: length($values);

  @if $length > 1 {
    $top: nth($values, 1);
    $right: nth($values, 2);

    @if $length == 2 and $top == $right {
      $values: $top;
    }
    @else if $length == 4 {
      $bottom: nth($values, 3);
      $left: nth($values, 4);

      @if $top == $right and $top == $bottom and $top == $left {
        $values: $top;
      }
      @else if $top == $bottom and $left == $right {
        $values: $top $left;
      }
    }
  }

  @return $values;
}

// =============================================================================

@function save-expand-values($values) {
  @if length($values) == 2 {
    $top-bottom: nth($values, 1);
    $left-right: nth($values, 2);

    @if $top-bottom {
      $values: $top-bottom null $top-bottom null;
    }
    @else if $left-right {
      $values: null $left-right null $left-right;
    }
  }

  @return $values;
}

// =============================================================================

@function save-concat($lists) {
  $result: ();

  @each $list in $lists {
    $result: join($result, $list);
  }

  @return $result;
}

// is this the best way?
@function save-concat-all($lists) {
  $result: ();

  @each $list in $lists {
    $result: join($result, $list);
  }

  @if cola-contains-types($result, list) {
    @return save-concat-all($result);
  }

  @return $result;
}

// =============================================================================

@function save-map-get-values($arguments, $values) {
  $result: ();

  @each $value in $values {
    $result: join($result, map-get($arguments, $value));
  }

  @return $result;
}

// =============================================================================

@function save-process-arguments($arguments) {
  $properties: ();
  $values:     ();
  $lengths:    ();
  $styles:     ();
  $colors:     ();
  $flags:      ();

  @each $argument in $arguments {
    $argument: save-x($argument);

    @if cola-type-of($argument) == string {
      $properties: join($properties, $argument);
    }
    @else if cola-contains-only-types($argument, null number) {
      $values: join($values, $argument);
    }
    @else if cola-type-of($argument) == length {
      $lengths: join($lengths, $argument);
    }
    @else if cola-type-of($argument) == style {
      @if cola-contains-only-types($values, null style) {
        $values: join($values, $argument);
      }
      @else {
        $styles: join($styles, $argument);
      }
    }
    @else if cola-type-of($argument) == color {
      @if cola-contains-only-types($values, null color) {
        $values: join($values, $argument);
      }
      @else {
        $colors: join($colors, $argument);
      }
    }
    @else if cola-type-of($argument) == flag {
      $flags: join($flags, $argument);
    }
  }

  $values: save-compress-values($values);

  @return (
    properties: $properties,
    values:     $values,
    lengths:    $lengths,
    styles:     $styles,
    colors:     $colors,
    flags:      $flags
  );
}

// =============================================================================

@function save-process-values($values, $length) {
  @each $value in $values {
    @return $value + $length;
  }
}

// =============================================================================

@mixin save-output($property, $values, $lengths, $styles, $colors, $flags) {
  @if $lengths == () {
    $lengths: $cola-nil;
  }
  @each $length in $lengths {
    #{$property}: save-process-values($values, $length) $styles $colors $flags;
  }
}

// =============================================================================

@mixin save($arguments) {
  $arguments: cola-flatten($arguments);
  $arguments: save-process-arguments($arguments);

  $properties: map-get($arguments, properties);
  $values:     map-get($arguments, values);
  $lengths:    map-get($arguments, lengths);
  $styles:     map-get($arguments, styles);
  $colors:     map-get($arguments, colors);
  $flags:      map-get($arguments, flags);

  $values: save-expand-values($values);

  @each $property in $properties {
    $suffix: save-suffix($property);

    @if cola-index($values, null) {
      @for $i from 1 through length($values) {
        $value: nth($values, $i);
        $this-property: save-append-suffix($property, nth($suffix, $i));

        @if $value {
          @include save-output($this-property, $value, $lengths, $styles, $colors, $flags);
        }
      }
    }
    @else {
      @include save-output($property, $values, $lengths, $styles, $colors, $flags);
    }
  }
}

// =============================================================================
