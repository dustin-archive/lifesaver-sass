// =======================================
// + Extensions / LifeSaver / Properties
// =======================================

//
// + Size
// ========

@mixin size($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  $length: length($value-list);

  @if $length == 2 {
    $width:  nth($value-list, 1);
    $height: nth($value-list, 2);

    @include ls(width, $width, $unit-list, $scale, $flag);
    @include ls(height, $height, $unit-list, $scale, $flag);
  }
  @else if $length == 1 {
    $width:  nth($value-list, 1);
    $height: nth($value-list, 1);

    @include ls(width, $width, $unit-list, $scale, $flag);
    @include ls(height, $height, $unit-list, $scale, $flag);
  }
  @else {
    @error 'Mayday! Mayday!  LifeSaver: You can only pass up to 2 values to size.';
  }
}

@mixin min-size($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  $length: length($value-list);

  @if $length == 2 {
    $width:  nth($value-list, 1);
    $height: nth($value-list, 2);

    @include ls(min-width, $width, $unit-list, $scale, $flag);
    @include ls(min-height, $height, $unit-list, $scale, $flag);
  }
  @else if $length == 1 {
    $width:  nth($value-list, 1);
    $height: nth($value-list, 1);

    @include ls(min-width, $width, $unit-list, $scale, $flag);
    @include ls(min-height, $height, $unit-list, $scale, $flag);
  }
  @else {
    @error 'Mayday! Mayday!  LifeSaver: You can only pass up to 2 values to size.';
  }
}

@mixin max-size($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  $length: length($value-list);

  @if $length == 2 {
    $width:  nth($value-list, 1);
    $height: nth($value-list, 2);

    @include ls(max-width, $width, $unit-list, $scale, $flag);
    @include ls(max-height, $height, $unit-list, $scale, $flag);
  }
  @else if $length == 1 {
    $width:  nth($value-list, 1);
    $height: nth($value-list, 1);

    @include ls(max-width, $width, $unit-list, $scale, $flag);
    @include ls(max-height, $height, $unit-list, $scale, $flag);
  }
  @else {
    @error 'Mayday! Mayday!  LifeSaver: You can only pass up to 2 values to size.';
  }
}

//
// + Margin
// ==========

@mixin margin($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  @include ls(margin, $value-list, $unit-list, $scale, $flag);
}

//
// + Padding
// ===========

@mixin padding($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  @include ls(padding, $value-list, $unit-list, $scale, $flag);
}

//
// + Border
// ==========

@mixin border-width($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  @include ls(border-width, $value-list, $unit-list, $scale, $flag);
}

@mixin border-radius($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  @include ls(border-radius, $value-list, $unit-list, $scale, $flag);
}

@mixin radius($value-list: null, $unit-list: null, $scale: null, $flag: null) {
  @include ls(border-radius, $value-list, $unit-list, $scale, $flag);
}

//
// + Position
// ============

@mixin position($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin position-absolute($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: absolute;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin absolute($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: absolute;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin position-fixed($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: fixed;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin fixed($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: fixed;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin position-inherit($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: inherit;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin position-relative($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: relative;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin relative($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: relative;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin position-static($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: static;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin static($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: static;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin position-sticky($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: sticky;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}

@mixin sticky($value-list: null, $unit-list: null, $scale: null, $z: null, $flag: null) {
  position: sticky;
  @include ls(position, $value-list, $unit-list, $scale, $flag);
  z-index: append($z, $flag);
}
