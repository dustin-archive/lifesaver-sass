//
// + Process arguments
// =============================================================================


@function process-arguments($arguments) {
  $properties: ();
  $values:     ();
  $style:      (); // border
  $color:      (); // border
  $units:      ();
  $scale:      ();
  $flag:       ();

  $style-list: none hidden dotted dashed solid double groove ridge inset outset;

  @each $argument in $arguments {
    @if $argument == x {
      $argument: null;
    }

    @if contains-only-types($argument, 'null' number color) {

      // this is kind of messy...
      @if $values == ()
        or contains-only-types($argument, 'null')
        or contains-only-types($values, 'null' color)
        or type-of($argument) == number {
        $values: join($values, $argument);
      }
      @else {
        $color: join($color, $argument);
      }
    }
    @else if type-of($argument) == string {
      @if str-index($argument, '!') {
        $flag: join($flag, $argument);
      }
      @else if index($style-list, $argument) {
        $style: join($style, $argument);
      }
      @else if function-exists($argument) {
        $units: join($units, $argument);
      }
      @else {
        $properties: join($properties, $argument);
      }
    }
    @else if unit($argument) == x {
      $scale: join($scale, $argument);
    }
  }

  @if length($properties) == 0 { $properties: null; }
  @if length($values)     == 0 { $values:     null; }
  @if length($style)      == 0 { $style:      null; }
  @if length($color)      == 0 { $color:      null; }
  @if length($units)      == 0 { $units:      null; }
  @if length($scale)      == 0 { $scale:      null; }
  @if length($flag)       == 0 { $flag:       null; }

  @debug $properties $values $style $color $units $scale $flag;

  @return (
    properties: $properties,
    values:     compress-matching-values($values),
    style:      $style,
    color:      $color,
    units:      $units,
    scale:      $scale,
    flag:       $flag
  );
}
