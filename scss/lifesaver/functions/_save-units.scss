//
// + Safe convert
// =============================================================================

@function save-safe-convert($value) {
  @if cola-type-of($value) == number {
    @return call('save-safe-convert-expression', $value);
  }

  @return $value;
}

@function save-safe-convert-expression($value) {
  @return round($value * 16) / 256;
}

//
// + Scale
// =============================================================================

@function save-scale($value, $scale) {
  @if cola-contains-type-and($value $scale, number) {
    @return call('save-scale-expression', $value, $scale);
  }

  @return $value;
}

@function save-scale-expression($value, $scale) {
  @return (16 / $scale) * $value;
}

//
// + Unit functions
// =============================================================================

@function save-unit($function, $value, $scale) {
  $result: $value;

  @if cola-contains-type-and($value $scale, number) {
    $result: call($function, save-safe-convert(save-scale($value, $scale)));
  }
  @else if cola-contains-type-and($value, number) {
    $result: call($function, save-safe-convert($value));
  }

  @return $result;
}

@function save-un-expression($value) {
  @return $value;
}

@function save-em-expression($value) {
  @return $value * 1em;
}

@function save-rem-expression($value) {
  @return $value * 1rem;
}

// =============================================================================

@function un($value, $scale: null) {
  @return save-unit('save-un-expression', $value, $scale);
}

@function em($value, $scale: null) {
  @return save-unit('save-em-expression', $value, $scale);
}

@function rem($value, $scale: null) {
  @return save-unit('save-rem-expression', $value, $scale);
}
